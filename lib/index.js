// Generated by CoffeeScript 1.10.0
var Gitver, Promise, command, exec, semver;

exec = require('child_process').exec;

semver = require('semver');

Promise = require('bluebird');

command = function(cmd, cb) {
  return new Promise(function(resolve, reject) {
    return exec(cmd, function(err, stdout, stderr) {
      var result;
      if (err) {
        reject(err);
        return;
      }
      result = stdout.trim();
      resolve(result);
      if (cb) {
        return cb(result);
      }
    });
  });
};

Gitver = function() {};

Gitver.prototype.tag = function(cb) {
  return command('git describe --always --tag --abbrev=0', cb);
};

Gitver.prototype.longSha = function(cb) {
  return command('git rev-parse HEAD', cb);
};

Gitver.prototype.shortSha = function(cb) {
  return this.directory().then(function(gitDir) {
    return command('git log -n1 --pretty=format:%h', cb);
  });
};

Gitver.prototype.logInner = function(cb) {
  var tags;
  tags = [];
  return command('git log --format=%h%x00%s%x00%d').then(function(logOutput) {
    console.log(logOutput);
    return logOutput.split(/\r?\n/).forEach(function(line) {
      return console.log(line.split('\x00'));
    });
  });
};

Gitver.prototype.tags = function(cb) {
  return command('git tag -l').then(function(output) {
    var res;
    res = output.split('\n');
    cb && cb(res);
    return res;
  });
};

Gitver.prototype.directory = function(cb) {
  return command('git rev-parse --git-dir', cb);
};

Gitver.prototype.tag = function(cb) {
  return this.longSha().then(function(sha) {
    return command('git name-rev --tags --name-only ' + sha, cb);
  });
};

Gitver.prototype.current = function(cb) {
  var that;
  that = this;
  return this.tag().then(function(tagName) {
    var verName;
    if (tagName !== "undefined") {
      verName = semver.clean(tagName);
      if (cb) {
        cb(verName);
      }
      return verName;
    }
    return that.tags().then(function(names) {
      return Promise.filter(names, function(name) {
        return semver.clean(name);
      });
    }).then(function(names) {
      names = names.map(function(name) {
        return semver.clean(name);
      });
      return names.sort(semver.rcompare);
    }).then(function(names) {
      var lastNum, parts;
      if (names.length >= 1) {
        parts = names[0].split('.');
        lastNum = parseInt(parts[parts.length - 1], 10) + 1;
        parts[parts.length - 1] = '' + lastNum;
        return parts.join('.') + '.dev';
      }
      return '0.0.1.dev';
    }).then(function(verName) {
      if (cb) {
        cb(verName);
      }
      return verName;
    });
  });
};

module.exports = new Gitver();
